#include<stdio.h>

//01.数组指针------->指针
//int main() {
//	//int* p1=NULL;//整形指针------->存放整形的地址（指向整形的指针）
//	//char* p2 = NULL;//字符指针------->存放字符的地址（指向字符的指针）
//	//数组指针------->存放数组的地址（指向数组的指针）
//	//int arr[10] = {0};
//	//arr - 首元素地址 == &arr[0]
//	//&arr - 数组的地址
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int(* p)[10]=&arr;//数组地址存起来
//	return 0;
//}

//int main() {
//	char* arr[5];//存放指针的数组
//	char*(*pa)[5] = &arr;//*pa代表pa是指针....[5]代表pa指向的数组是5个元素.....char*代表pa指向的数组元素为char*类型
//	return 0;
//}

//int main() {
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int(*pa)[10] = &arr;
//	int i = 0;
//	//for (i = 0; i < 10;i++) {
//	//	printf("%d ",(*pa)[i]);
//	//}
//	//for (i = 0; i < 10; i++) {
//	//	printf("%d ",*(*pa+i) );
//	//}
//	return 0;
//}

////参数是数组的形式
//void printf1(int arr[3][5],int x,int y) {
//	for (int i = 0; i < x;i++) {
//		for (int j = 0; j < y;j++) {
//			printf("%d ",arr[i][j]);
//		}
//		printf("\n");
//	}
//}
////参数是指针的形式
//void printf2(int(*p)[5], int x, int y) {
//	for (int i = 0; i < x; i++) {
//		for (int j = 0; j < y; j++) {
////		printf("%d ", *(*(p + i)+j));
//			printf("%d ", p[i][j]);
//		}
//		printf("\n");
//	}
//}
//int main() {
//	//int arr[3][5] = { {1,2,3,4,5},{2,3,4,5,6},{3,4,5,6,7} };
//	//printf1(arr,3,5);//arr是首元素地址---->第一行的地址 
//	//printf2(arr, 3, 5);
//	int arr[10] = {1,2,3,4,5,6,7,8,9,10};
//	int i = 0;
//	int* p = arr;
//	for (i = 0; i < 10;i++) {
//		printf("%d ",*(p+i));
//		printf("%d ", *(arr + i));
//		printf("%d ", arr[i]);//arr[i]==*(arr+i)==*(p+i)==p[i]
//	}
//	return 0;
//}

// int arr[5]:arr是一个5个元素的数组，每个元素类型为int
// int* parr1[10]:parr1是一个10个元素的数组，每个元素类型为int*
// int (*parr2)[10]:parr2是一个指针，该指针指向了一个数组，数组有10个元素，每个元素类型为int------>parr2是数组指针
// int (*parr3[10])[5]:parr3是一个数组，该数组有10个元素（parr3[10]），剩下的（int (*)[5]）：每个元素是一个数组指针，该数组指针指向的数组元素有5个，每个数组元素类型为int

//02.数组参数、指针参数

////一维数组传参：
//void test(int arr[]) {}
//void test(int arr[10]) {}
//void test(int *arr) {}
//void test2(int *arr2[20]) {}
//void test2(int **arr2) {}
//int main() {
//	int arr[10] = { 0 };
//	int* arr2[20] = { 0 };
//	test(arr);
//	test2(arr2);
//	return 0;
//}

////二维数组传参：
////传数组：
//void test(int arr[3][5]) {}
//void test(int arr[][5]) {}//可以省略行，不能省略列
////传指针：
//void test(int (*arr)[5]) {}
//int main() {
//	int arr[3][5] = { 0 };
//	test(arr);
//	return 0;
//}

////一级指针传参：
//void test(int* p) {}
//void test(char* p) {}
//int main() {
//	int a = 10;
//	int* p = &a;
//	test1(&a);
//	test1(p);
//	return 0;
//}
////二级指针传参：
//void test(int** ptr) {}
//void test2(int** ptr) {} 
//int main() {
//	int n = 10;
//	int* p = &n;
//  int* *pp=&p;
//	test1(pp);
//	test1(&p);
//  int* arr[10];//指针数组
//  test2(arr);//指针数组也可以
//	return 0;
//}


//03.函数指针：指向函数的指针------>存放函数地址的指针
//int add(int x,int y) {
//	int z = 0;
//	z = x + y;
//	return z;
//}
//int main() {
//	int a = 10;
//	int b = 20;
//	add(a,b);
//	//&add和add一样，代表函数的地址
//	int (*pa)(int, int) = add;
//	printf("%d ", (*pa)(2,3));//5
//  printf("%d ", (pa)(2,3));//5
//	return 0;
//}

//void print(char* str) {
//	printf("%s\n",str);
//}
//int main() {
//	void(*p)(char*)=print;
//	(*p)("hello bit");
//	return 0;
//}

//(*(void (*)())0)(); 
//    (void (*)()          (void (*)())0                             (*(void (*)())0)              (*(void (*)())0)()
//    函数指针类型     强制类型转换----将0转换为函数指针类型     *----解引用0（根据地址找到函数）      调用函数（无参）
//void (*signal(int, void(*)(int)))(int);
//     signal(int, void(*)(int))            void (*)(int) 
//      函数（整形，函数指针）         signal函数的返回类型--->函数指针
//简化：
//typedef void(*pfun_t)(int);//函数重命名为：pfun_t
//pfun_t signal(int, pfun_t);


//加法
//int add(int x,int y) {
//	return x+y;
//}
////减法
//int sub(int x, int y) {
//	return x - y;
//}
////乘法
//int mul(int x, int y) {
//	return x * y;
//}
////除法
//int div(int x, int y) {
//	return x / y;
//}
//int main() {
//	int* arr[5];
//	int (*pa)(int, int) = add;//pa存放函数add的地址
//	//现在需要一个函数指针数组，存放四个函数的地址
//	int (*parr[4])(int, int) = {add,sub,mul,div};//函数指针的数组
//	for (int i = 0; i < 4;i++) {
//		printf("%d ",parr[i](2,3));//5 -1 6 0
//	}
//	return 0;
//}
